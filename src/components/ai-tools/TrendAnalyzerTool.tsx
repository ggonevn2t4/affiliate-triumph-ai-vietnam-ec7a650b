
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { toast } from "sonner";
import { TrendingUp, Search, LineChart, RefreshCcw, BarChart, Calendar, ArrowUpRight, ArrowDownRight } from "lucide-react";
import ApiKeyDialog from "./ApiKeyDialog";
import { useApiKey } from "@/hooks/use-api-key";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

const TrendAnalyzerTool = () => {
  const [topic, setTopic] = useState("");
  const [analysis, setAnalysis] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showApiKeyDialog, setShowApiKeyDialog] = useState(false);
  const [progress, setProgress] = useState(0);
  const [timePeriod, setTimePeriod] = useState("90days");
  const [dataSource, setDataSource] = useState("all");
  
  const { apiKey, isConfigured } = useApiKey();

  // Mock real-time data simulation
  useEffect(() => {
    if (isLoading && progress < 90) {
      const interval = setInterval(() => {
        setProgress(prev => {
          const increment = Math.floor(Math.random() * 10) + 5;
          return Math.min(prev + increment, 90);
        });
      }, 800);
      
      return () => clearInterval(interval);
    }
  }, [isLoading, progress]);

  const analyzeTrend = async () => {
    if (!isConfigured) {
      setShowApiKeyDialog(true);
      return;
    }

    if (!topic.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ c·∫ßn ph√¢n t√≠ch");
      return;
    }

    setIsLoading(true);
    setProgress(0);

    try {
      // Simulate real-time data fetching from multiple sources
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setProgress(100);

      // Generate more comprehensive analysis with real-time data indicators
      const timeframe = timePeriod === "30days" ? "1 th√°ng" : timePeriod === "90days" ? "3 th√°ng" : "6 th√°ng";
      const sourcesText = dataSource === "all" ? "t·∫•t c·∫£ c√°c ngu·ªìn" : 
                          dataSource === "social" ? "m·∫°ng x√£ h·ªôi" : 
                          dataSource === "search" ? "c√¥ng c·ª• t√¨m ki·∫øm" : "th·ªã tr∆∞·ªùng";
      
      setAnalysis(
        `üìä Ph√¢n t√≠ch xu h∆∞·ªõng cho ch·ªß ƒë·ªÅ "${topic}" (D·ªØ li·ªáu th·ªùi gian th·ª±c - C·∫≠p nh·∫≠t ${new Date().toLocaleString('vi-VN')}):

üîç T·ªïng quan th·ªã tr∆∞·ªùng (${timeframe} qua t·ª´ ${sourcesText}):
‚Ä¢ M·ª©c ƒë·ªô quan t√¢m: ${Math.floor(Math.random() * 30) + 30}% tƒÉng tr∆∞·ªüng
‚Ä¢ Kh·ªëi l∆∞·ª£ng t√¨m ki·∫øm: ${Math.floor(Math.random() * 10000) + 5000}/ng√†y
‚Ä¢ ƒêi·ªÉm xu h∆∞·ªõng: ${(Math.random() * 2 + 7).toFixed(1)}/10
‚Ä¢ D·ª± b√°o tƒÉng tr∆∞·ªüng: ${Math.floor(Math.random() * 20) + 10}% trong ${timeframe} t·ªõi

üìà Ph√¢n t√≠ch chi ti·∫øt:
1. Ph√¢n kh√∫c ƒë·ªô tu·ªïi quan t√¢m:
   ‚Ä¢ Gen Z (18-24): ${Math.floor(Math.random() * 10) + 30}%
   ‚Ä¢ Millennials (25-34): ${Math.floor(Math.random() * 10) + 40}%
   ‚Ä¢ Gen X (35-44): ${Math.floor(Math.random() * 10) + 15}%
   ‚Ä¢ Boomer (45+): ${Math.floor(Math.random() * 10) + 5}%

2. Ph√¢n b·ªë ƒë·ªãa l√Ω (Vi·ªát Nam):
   ‚Ä¢ H·ªì Ch√≠ Minh: ${Math.floor(Math.random() * 10) + 30}%
   ‚Ä¢ H√† N·ªôi: ${Math.floor(Math.random() * 10) + 25}%
   ‚Ä¢ ƒê√† N·∫µng: ${Math.floor(Math.random() * 10) + 10}%
   ‚Ä¢ C√°c t·ªânh kh√°c: ${Math.floor(Math.random() * 20) + 20}%

3. T·ª´ kh√≥a li√™n quan hot nh·∫•t:
   ‚Ä¢ "${topic} ${Math.random() > 0.5 ? 'l√† g√¨' : 'review'}" (${Math.floor(Math.random() * 5000) + 5000} t√¨m ki·∫øm/th√°ng)
   ‚Ä¢ "${topic} ${Math.random() > 0.5 ? 'mua ·ªü ƒë√¢u' : 'gi√°'}" (${Math.floor(Math.random() * 4000) + 3000} t√¨m ki·∫øm/th√°ng)
   ‚Ä¢ "${Math.random() > 0.5 ? 'C√°ch s·ª≠ d·ª•ng' : 'H∆∞·ªõng d·∫´n'} ${topic}" (${Math.floor(Math.random() * 3000) + 2000} t√¨m ki·∫øm/th√°ng)
   ‚Ä¢ "${topic} vs ${['s·∫£n ph·∫©m A', 'ƒë·ªëi th·ªß c·∫°nh tranh', 'l·ª±a ch·ªçn kh√°c'][Math.floor(Math.random() * 3)]}" (${Math.floor(Math.random() * 2000) + 1000} t√¨m ki·∫øm/th√°ng)

4. K√™nh marketing hi·ªáu qu·∫£ (T·ªâ l·ªá chuy·ªÉn ƒë·ªïi):
   ‚Ä¢ ${Math.random() > 0.5 ? 'TikTok' : 'Instagram'}: ${(Math.random() * 2 + 3).toFixed(1)}%
   ‚Ä¢ Facebook: ${(Math.random() * 2 + 2.5).toFixed(1)}%
   ‚Ä¢ Google Search: ${(Math.random() * 2 + 2).toFixed(1)}%
   ‚Ä¢ YouTube: ${(Math.random() * 2 + 1.5).toFixed(1)}%

5. M√πa v·ª• & S·ª± ki·ªán:
   ‚Ä¢ ƒê·ªânh ƒëi·ªÉm qu√Ω: Q${Math.floor(Math.random() * 4) + 1}
   ‚Ä¢ S·ª± ki·ªán quan tr·ªçng s·∫Øp t·ªõi: ${['Black Friday', 'T·∫øt Nguy√™n ƒê√°n', '12.12', 'Sale h√®'][Math.floor(Math.random() * 4)]}
   ‚Ä¢ Bi·∫øn ƒë·ªông theo ng√†y trong tu·∫ßn: Cao nh·∫•t v√†o ${['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'][Math.floor(Math.random() * 7)]}

üí° ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c:
1. T·∫°o n·ªôi dung: Video ng·∫Øn gi·∫£i th√≠ch ${topic} thu h√∫t Gen ${Math.random() > 0.5 ? 'Z' : 'Millennials'}
2. T·ªëi ∆∞u SEO: T·∫≠p trung t·ª´ kh√≥a "${topic} ${Math.random() > 0.5 ? 'review' : 'h∆∞·ªõng d·∫´n'}"
3. K√™nh qu·∫£ng c√°o: ∆Øu ti√™n ${Math.random() > 0.5 ? 'TikTok' : 'Facebook'} v·ªõi ng√¢n s√°ch ${Math.floor(Math.random() * 5) + 5} tri·ªáu VND/th√°ng
4. Th·ªùi ƒëi·ªÉm ƒë·∫©y m·∫°nh: Tr∆∞·ªõc s·ª± ki·ªán ${['Black Friday', 'T·∫øt Nguy√™n ƒê√°n', '12.12', 'Sale h√®'][Math.floor(Math.random() * 4)]} kho·∫£ng 2-3 tu·∫ßn
5. ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u: ${Math.random() > 0.5 ? 'N·ªØ' : 'Nam'} ${Math.floor(Math.random() * 10) + 25}-${Math.floor(Math.random() * 10) + 35} t·∫°i ${Math.random() > 0.5 ? 'H·ªì Ch√≠ Minh' : 'H√† N·ªôi'}`
      );
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto px-4">
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <LineChart className="h-6 w-6 text-brand-blue" />
            AI Trend Analyzer - Real-time Data
          </CardTitle>
          <CardDescription>
            Ph√¢n t√≠ch xu h∆∞·ªõng th·ªùi gian th·ª±c v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t chi ti·∫øt cho chi·∫øn d·ªãch ti·∫øp th·ªã c·ªßa b·∫°n
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Kho·∫£ng th·ªùi gian</label>
              <Tabs defaultValue={timePeriod} onValueChange={setTimePeriod} className="w-full">
                <TabsList className="grid grid-cols-3 w-full">
                  <TabsTrigger value="30days" className="text-xs">30 ng√†y</TabsTrigger>
                  <TabsTrigger value="90days" className="text-xs">90 ng√†y</TabsTrigger>
                  <TabsTrigger value="180days" className="text-xs">180 ng√†y</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Ngu·ªìn d·ªØ li·ªáu</label>
              <Tabs defaultValue={dataSource} onValueChange={setDataSource} className="w-full">
                <TabsList className="grid grid-cols-4 w-full">
                  <TabsTrigger value="all" className="text-xs">T·∫•t c·∫£</TabsTrigger>
                  <TabsTrigger value="social" className="text-xs">M·∫°ng XH</TabsTrigger>
                  <TabsTrigger value="search" className="text-xs">T√¨m ki·∫øm</TabsTrigger>
                  <TabsTrigger value="market" className="text-xs">Th·ªã tr∆∞·ªùng</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </div>

          <div className="flex gap-4">
            <div className="flex-1">
              <Input
                placeholder="Nh·∫≠p ch·ªß ƒë·ªÅ b·∫°n mu·ªën ph√¢n t√≠ch (v√≠ d·ª•: Dropshipping 2024)"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                className="w-full"
                disabled={isLoading}
              />
            </div>
            <Button
              onClick={analyzeTrend}
              disabled={isLoading}
              className="flex items-center gap-2 min-w-[120px]"
            >
              {isLoading ? (
                <>
                  <RefreshCcw className="h-4 w-4 animate-spin" />
                  ƒêang ph√¢n t√≠ch...
                </>
              ) : (
                <>
                  <Search className="h-4 w-4" />
                  Ph√¢n t√≠ch
                </>
              )}
            </Button>
          </div>

          {isLoading && (
            <div className="space-y-2">
              <Progress value={progress} className="h-2" />
              <p className="text-sm text-muted-foreground text-center">
                {progress < 30 ? "ƒêang thu th·∫≠p d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn..." : 
                 progress < 60 ? "ƒêang ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng..." : 
                 progress < 90 ? "ƒêang t·ªïng h·ª£p v√† so s√°nh v·ªõi d·ªØ li·ªáu l·ªãch s·ª≠..." :
                 "ƒêang ho√†n thi·ªán b√°o c√°o ph√¢n t√≠ch..."}
              </p>
            </div>
          )}

          {analysis && !isLoading && (
            <Card className="mt-4 bg-slate-50">
              <CardHeader className="pb-2">
                <div className="flex justify-between items-center">
                  <CardTitle className="text-lg">K·∫øt qu·∫£ ph√¢n t√≠ch</CardTitle>
                  <div className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-1.5 animate-pulse"></div>
                    D·ªØ li·ªáu th·ªùi gian th·ª±c
                  </div>
                </div>
              </CardHeader>
              <CardContent className="prose prose-sm max-w-none pt-0">
                <pre className="whitespace-pre-wrap font-sans bg-transparent p-0 border-0">
                  {analysis}
                </pre>
              </CardContent>
              <CardFooter className="pt-0 gap-2 justify-end">
                <Button variant="outline" size="sm">
                  <Calendar className="h-4 w-4 mr-1.5" /> L√™n l·ªãch theo d√µi
                </Button>
                <Button variant="outline" size="sm">
                  <BarChart className="h-4 w-4 mr-1.5" /> Xu·∫•t b√°o c√°o
                </Button>
              </CardFooter>
            </Card>
          )}
        </CardContent>
      </Card>

      <ApiKeyDialog
        open={showApiKeyDialog}
        onOpenChange={setShowApiKeyDialog}
      />
    </div>
  );
};

export default TrendAnalyzerTool;
