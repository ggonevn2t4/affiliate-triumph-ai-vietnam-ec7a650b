
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Sparkles, RefreshCcw, Copy, Check, AlertTriangle } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { useGeminiApi } from '@/hooks/use-gemini-api';

interface ContentFormat {
  id: string;
  name: string;
}

const contentFormats: ContentFormat[] = [
  { id: 'blog', name: 'B√†i vi·∫øt blog' },
  { id: 'social', name: 'M·∫°ng x√£ h·ªôi' },
  { id: 'email', name: 'Email marketing' },
  { id: 'product', name: 'M√¥ t·∫£ s·∫£n ph·∫©m' },
];

const ContentGenerator = () => {
  const [productName, setProductName] = useState('');
  const [selectedFormat, setSelectedFormat] = useState<string>('blog');
  const [generatedContent, setGeneratedContent] = useState<string>('');
  const [copied, setCopied] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  
  const { generateCompletion, isLoading: isGenerating } = useGeminiApi();

  const handleGenerate = async () => {
    if (!productName) {
      toast({
        title: "Thi·∫øu th√¥ng tin",
        description: "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m ƒë·ªÉ t·∫°o n·ªôi dung",
        variant: "destructive"
      });
      return;
    }
    
    setGeneratedContent('');
    setError(null);
    
    try {
      const formatName = contentFormats.find(format => format.id === selectedFormat)?.name || selectedFormat;
      
      console.log("B·∫Øt ƒë·∫ßu t·∫°o n·ªôi dung cho:", productName, "v·ªõi ƒë·ªãnh d·∫°ng:", formatName);
      
      const prompt = `B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ Affiliate Marketing t·∫°i Vi·ªát Nam.
      H√£y t·∫°o n·ªôi dung "${formatName}" cho s·∫£n ph·∫©m c√≥ t√™n: "${productName}".
      
      H√£y t·∫°o n·ªôi dung ph√π h·ª£p v·ªõi ƒë·ªãnh d·∫°ng, t·ªëi ∆∞u SEO, v√† h·∫•p d·∫´n ƒë·ªÉ tƒÉng t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi.
      Vi·∫øt b·∫±ng ti·∫øng Vi·ªát v√† ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam.
      
      QUAN TR·ªåNG: KH√îNG s·ª≠ d·ª•ng k√Ω t·ª± ** trong n·ªôi dung.`;

      const content = await generateCompletion([
        {
          role: "system",
          content: "You are a Vietnamese affiliate marketing expert. Create compelling content optimized for the Vietnamese market. Do not use asterisks (**) in your content."
        },
        {
          role: "user",
          content: prompt
        }
      ]);
      
      console.log("Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi:", content ? "C√≥ n·ªôi dung" : "Kh√¥ng c√≥ n·ªôi dung");
      
      if (content) {
        setGeneratedContent(content);
      } else {
        setError("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung cho s·∫£n ph·∫©m n√†y. ƒêang hi·ªÉn th·ªã n·ªôi dung m·∫´u.");
        setFallbackContent();
      }
    } catch (error) {
      console.error("Error generating content:", error);
      setError("ƒê√£ x·∫£y ra l·ªói khi t·∫°o n·ªôi dung. ƒêang hi·ªÉn th·ªã n·ªôi dung m·∫´u.");
      
      toast({
        title: "L·ªói",
        description: "ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive"
      });
      
      setFallbackContent();
    }
  };
  
  const setFallbackContent = () => {
    const formatTexts = {
      blog: `# ƒê√°nh gi√° chi ti·∫øt v·ªÅ ${productName}: C√≥ ƒë√°ng ƒë·ªÉ b·∫°n mua kh√¥ng?

N·∫øu b·∫°n ƒëang t√¨m ki·∫øm m·ªôt ${productName} ch·∫•t l∆∞·ª£ng cao, b·∫°n ƒë√£ ƒë·∫øn ƒë√∫ng n∆°i. Trong b√†i vi·∫øt n√†y, ch√∫ng t√¥i s·∫Ω ph√¢n t√≠ch chi ti·∫øt v·ªÅ s·∫£n ph·∫©m n√†y v√† gi√∫p b·∫°n quy·∫øt ƒë·ªãnh xem n√≥ c√≥ ph·∫£i l√† l·ª±a ch·ªçn t·ªët cho nhu c·∫ßu c·ªßa b·∫°n hay kh√¥ng.

## Nh·ªØng ∆∞u ƒëi·ªÉm n·ªïi b·∫≠t c·ªßa ${productName}

- Thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† b·ªÅn b·ªâ
- Hi·ªáu su·∫•t v∆∞·ª£t tr·ªôi so v·ªõi c√°c s·∫£n ph·∫©m c√πng ph√¢n kh√∫c
- Ti·∫øt ki·ªám chi ph√≠ d√†i h·∫°n
- ƒê∆∞·ª£c nhi·ªÅu chuy√™n gia ƒë√°nh gi√° cao

## Ai n√™n mua ${productName}?

S·∫£n ph·∫©m n√†y ƒë·∫∑c bi·ªát ph√π h·ª£p v·ªõi nh·ªØng ng∆∞·ªùi ƒëang t√¨m ki·∫øm gi·∫£i ph√°p hi·ªáu qu·∫£ m√† kh√¥ng c·∫ßn ph·∫£i chi qu√° nhi·ªÅu ti·ªÅn...`,
      
      social: `üî• REVIEW HOT: ${productName} - S·∫£n ph·∫©m ƒëang l√†m m∆∞a l√†m gi√≥ tr√™n th·ªã tr∆∞·ªùng!

‚úÖ Thi·∫øt k·∫ø sang tr·ªçng
‚úÖ Hi·ªáu su·∫•t v∆∞·ª£t tr·ªôi
‚úÖ Gi√° c·ª±c k·ª≥ h·ª£p l√Ω

üëâ ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi s·ªü h·ªØu ${productName} v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát khi mua qua link trong bio!

#review #musthave #deal`,
      
      email: `Ch√†o b·∫°n,

T√¥i v·ª´a kh√°m ph√° ra m·ªôt s·∫£n ph·∫©m tuy·ªát v·ªùi m√† t√¥i nghƒ© b·∫°n s·∫Ω th√≠ch - ${productName}.

ƒêi·ªÅu l√†m t√¥i ·∫•n t∆∞·ª£ng nh·∫•t v·ªÅ ${productName} l√† [ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t]. N√≥ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ [v·∫•n ƒë·ªÅ ph·ªï bi·∫øn] m·ªôt c√°ch hi·ªáu qu·∫£ v√† ti·∫øt ki·ªám.

Hi·ªán t·∫°i ƒëang c√≥ ch∆∞∆°ng tr√¨nh gi·∫£m gi√° 15% cho s·∫£n ph·∫©m n√†y. B·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu th√™m t·∫°i ƒë√¢y: [Link]

Tr√¢n tr·ªçng,
[T√™n c·ªßa b·∫°n]`,
      
      product: `${productName}

‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (4.9/5) - D·ª±a tr√™n 253 ƒë√°nh gi√°

‚úÖ [ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t 1]
‚úÖ [ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t 2]
‚úÖ [ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t 3]

üëâ S·∫£n ph·∫©m hot nh·∫•t ph√¢n kh√∫c [lo·∫°i s·∫£n ph·∫©m] hi·ªán nay
üëâ B·∫£o h√†nh ch√≠nh h√£ng 12 th√°ng
üëâ Giao h√†ng mi·ªÖn ph√≠ to√†n qu·ªëc

Gi√° g·ªëc: ‚Ç´XXX,XXX
Gi√° ∆∞u ƒë√£i: ‚Ç´XXX,XXX (Gi·∫£m 20%)

Mua ngay k·∫ªo h·∫øt!`,
    };
    
    const content = formatTexts[selectedFormat as keyof typeof formatTexts];
    setGeneratedContent(content);
  };
  
  const handleCopy = () => {
    if (!generatedContent) return;
    navigator.clipboard.writeText(generatedContent);
    setCopied(true);
    toast({
      title: "ƒê√£ sao ch√©p",
      description: "N·ªôi dung ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
    });
    setTimeout(() => setCopied(false), 2000);
  };
  
  const handleRegenerate = () => {
    handleGenerate();
  };
  
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold">T·∫°o n·ªôi dung b·∫±ng AI</h3>
        <div className="flex items-center text-brand-purple text-sm font-medium">
          <Sparkles className="w-4 h-4 mr-2" />
          <span>AI content creator</span>
        </div>
      </div>
      
      <div className="grid gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">T√™n s·∫£n ph·∫©m</label>
          <input
            type="text"
            value={productName}
            onChange={(e) => setProductName(e.target.value)}
            placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m ƒë·ªÉ t·∫°o n·ªôi dung"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brand-blue/50 focus:border-brand-blue"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">ƒê·ªãnh d·∫°ng n·ªôi dung</label>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
            {contentFormats.map((format) => (
              <button
                key={format.id}
                onClick={() => setSelectedFormat(format.id)}
                className={`px-3 py-2 border rounded-md text-sm transition-all
                  ${selectedFormat === format.id
                    ? 'border-brand-purple bg-brand-purple/10 text-brand-purple'
                    : 'border-gray-200 hover:border-gray-300'
                  }`}
              >
                {format.name}
              </button>
            ))}
          </div>
        </div>
        
        <Button 
          onClick={handleGenerate}
          disabled={!productName || isGenerating}
          className="btn-gradient"
        >
          {isGenerating ? (
            <>
              <RefreshCcw className="w-4 h-4 mr-2 animate-spin" />
              ƒêang t·∫°o...
            </>
          ) : (
            <>
              <Sparkles className="w-4 h-4 mr-2" />
              T·∫°o n·ªôi dung
            </>
          )}
        </Button>
      </div>
      
      {error && (
        <div className="mb-4 bg-amber-50 border border-amber-200 rounded-lg p-3 flex items-start gap-2">
          <AlertTriangle className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
          <div>
            <p className="text-amber-800 text-sm">{error}</p>
          </div>
        </div>
      )}
      
      {generatedContent && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg">
          <div className="flex justify-between items-center px-4 py-2 border-b border-gray-200">
            <span className="text-sm font-medium">N·ªôi dung ƒë√£ t·∫°o</span>
            <div className="flex space-x-2">
              <button 
                onClick={handleRegenerate} 
                className="p-1 rounded hover:bg-gray-200"
                title="T·∫°o l·∫°i"
              >
                <RefreshCcw className="w-4 h-4 text-gray-600" />
              </button>
              <button 
                onClick={handleCopy} 
                className="p-1 rounded hover:bg-gray-200"
                title="Sao ch√©p"
              >
                {copied ? (
                  <Check className="w-4 h-4 text-green-600" />
                ) : (
                  <Copy className="w-4 h-4 text-gray-600" />
                )}
              </button>
            </div>
          </div>
          <div className="p-4 text-sm whitespace-pre-line max-h-80 overflow-y-auto">
            {generatedContent}
          </div>
        </div>
      )}
    </div>
  );
};

export default ContentGenerator;
